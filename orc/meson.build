# dependencies : glib_dep
#inc = include_directories('.')

orc_sources = [ 'orc.c',
                'orcbytecode.c',
                'orccode.c',
                'orccodemem.c',
                'orccompiler.c',
                'orcdebug.c',
                'orcemulateopcodes.c',
                'orcexecutor.c',
                'orcfunctions.c',
                'orconce.c',
                'orcopcodes.c',
                'orcparse.c',
                'orcprogram.c',
                'orcprogram-c.c',
                'orcprogram.h',
                'orcrule.c',
                'orcutils.c' ]

orc_c_args = ['-DORC_ENABLE_UNSTABLE_API', '-D_GNU_SOURCE' ]

backend = get_option('enable_backend')

if backend == 'sse' or backend == 'all'
  orc_sources += [ 'orcsse.c', 'orcrules-sse.c', 'orcprogram-sse.c',
                   'orcx86.c', 'orcx86insn.c' ]
endif

if backend == 'mmx' or backend == 'all'
  # we assume it is ok to include the same file (orcx86) twice
  # in case all backends are selected (ie mmx and sse)
  orc_sources += [ 'orcmmx.c', 'orcrules-mmx.c', 'orcprogram-mmx.c', 'orcx86.c' ]
endif

if backend == 'altivec' or backend == 'all'
  orc_sources += [ 'orcrules-altivec.c', 'orcprogram-altivec.c', 'orcpowerpc.c' ]
endif

if backend == 'neon' or backend == 'all'
  orc_sources += [ 'orcprogram-neon.c', 'orcrules-neon.c', 'orcarm.c' ]
endif

# ARM backend is disabled until it has decent coverage
if backend == 'arm' or backend == 'all'
  # we assume it is ok to include the same file (orcarm) twice
  # in case all backends are selected (ie neon and arm)
  # orc_sources += [ 'orcprogram-arm.c', 'orcrules-arm.c', 'orcarm.c' ]
endif

if backend == 'c64x' or backend == 'all'
  orc_sources += [ 'orcprogram-c64x-c.c' ]
endif

if backend == 'mips' or backend == 'all'
  orc_sources += [ 'orcmips.c', 'orcprogram-mips.c', 'orcrules-mips.c' ]
endif

if cpu_family.startswith('x86')
  orc_sources += [ 'orccpu-x86.c' ]
elif cpu_family == 'powerpc'
  orc_sources += [ 'orccpu-powerpc.c' ]
elif cpu_family == 'arm'
  orc_sources += [ 'orccpu-arm.c' ]
endif

orc_dependencies = [ libm ]

if cc.has_function('clock_gettime', prefix : '#include <time.h>')
  config_h.set('HAVE_CLOCK_GETTIME', true)
  orc_dependencies += find_library('rt', required : false)
endif
if cc.has_function('__android_log_print', prefix : '#include <android/log.h>')
  config_h.set('HAVE_ANDROID_LIBLOG', true)
  orc_dependencies += find_library('log', required : true)
endif

orc_headers = [ 'orc.h',
                'orcarm.h',
                'orcbytecode.h',
                'orcbytecodes.h',
                'orccode.h',
                'orccompiler.h',
                'orcconstant.h',
                'orccpu.h',
                'orccpuinsn.h',
                'orcdebug.h',
                'orcemulateopcodes.h',
                'orcexecutor.h',
                'orcfunctions.h',
                'orcinstruction.h',
                'orcinternal.h',
                'orclimits.h',
                'orcmmx.h',
                'orcneon.h',
                'orconce.h',
                'orcopcode.h',
                'orcparse.h',
                'orcpowerpc.h',
                'orcprogram.h',
                'orcrule.h',
                'orcsse.h',
                'orctarget.h',
                'orcutils.h',
                'orcvariable.h',
                'orcx86.h',
                'orcx86insn.h',
                'orcmips.h',
                'orc-stdint.h' ]

install_headers(orc_headers, subdir : 'orc-' + orc_api + '/orc')

# FIXME: what about shared and/or static lib? look at options?
if cc.get_id() != 'msvc'
  link_args = ['-Wl,--no-undefined',
               '-Wl,--version-script,' + meson.current_source_dir() + '/orc.map']
else
  link_args = []
endif

orc_lib = library('orc-' + orc_api, orc_sources,
  include_directories : orc_inc,
  c_args : orc_c_args,
  dependencies : orc_dependencies,
  link_args : link_args,
  link_depends : 'orc.map',
  install : true)

executable ('generate-bytecode', [ 'generate-bytecode.c' ],
            install: false,
            include_directories: orc_inc,
            link_with: [ orc_lib ])

executable ('generate-emulation', [ 'generate-emulation.c' ],
            install: false,
            include_directories: orc_inc,
            link_with: [ orc_lib ])
